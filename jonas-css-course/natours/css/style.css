/*
  COLORS:
    Light green: #7ed56f
    Medium green: #55c57a
    Dark green: #28b485
*/

/* universal selector will apply on every element, every element should have box-size property border-box that is inherited from body */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

/* root font-size is set in html selector */
html {
  font-size: 62.5%; /* (10/16 x 100) percentage of 10 from 16 */
}

body {
  /* we are going to use font properties in inheritance, so this is in the body */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 1.6rem; */
  line-height: 1.7;
  color: #777;

  /* padding is not inherited */
  padding: 2rem;
  /* put on body, from where every element will inherit checkout the universal selector */
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgb(40, 180, 133, 0.8)
    ),
    url('../img/hero.jpg');

  /* always tries to fit its container div */
  background-size: cover;
  background-position: top;
  /* from here logo-box will count (position absolute will count) */
  position: relative;

  /* provide the 4 coordinates, that will automatically joined by clip-path */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0% 100%);
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  /* translate the half of box on y-axis and x-axis 50% both */
  transform: translate(-50%, -50%);

  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  /* this determines if the back-part of the element (when being transformed) is visible or hidden of the user */
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

/* by default h1 has higher font-weight */
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveFromLeft;
  animation-duration: 0.7s;
  animation-timing-function: ease-out;

  /* animation-delay: 3s; */ /* this will delay the animation */
  /* animation-iteration-count: 3; */ /* animation will happen 3 times */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.74rem;

  animation: moveInRight 0.7s ease-out;
}

/* special state of selector, when it is an anchor element, it function as link */
/* "visited" state when user has already clicked the button */
/* we want to the link, and visited state of button looks the same, in reality colors are bit different */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /* we should always add this, if we add height, margin or padding */
  display: inline-block;
  border-radius: 5rem;
  font-size: 1.6rem;
  position: relative;

  transition: transform 0.2s ease-out;
}

.btn:hover {
  transform: translateY(-3px);
  /* x-axis, y-axis, blur, color */
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  /* always related to the initial link state */
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn::after {
  /* these two are necessary */
  content: '';
  /* because btn is also inline block */
  display: inline-block;
  /* pseudo-element is treated like a child of element */
  height: 100%;
  width: 100%;
  /* this is 100% of the width and height of parent element (btn itself) */
  border-radius: 5rem;
  transition: all 0.4s ease-out;

  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}

/* when button is hovered, add styles to after pseudo element */
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn--white {
  background-color: #fff;
  color: #777;
}

.btn--white::after {
  background-color: #fff;
}

.btn--animated {
  animation: moveFromBottom 0.5s ease-out 0.75s;
  /* this will apply the 0% animation styles before the animation starts */
  animation-fill-mode: backwards;
}

/* for browser performance it is better to animate only two properties, one is "opacity", and other one is "transform" */
@keyframes moveFromLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveFromRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveFromBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
